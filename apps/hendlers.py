from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

import apps.keyboard as kb
from apps.search import search_query


router = Router()

type_movies = {'film': '–§–∏–ª—å–º', 'series': '–°–µ—Ä–∏–∞–ª'}


class Params(StatesGroup):
    type_movie = State()
    name = State()


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " +
                         f"<b>{message.from_user.full_name}</b> üòé",
                         parse_mode="html", reply_markup=kb.find_movie)


@router.message(F.text == '–ù–∞–π—Ç–∏')
async def movie_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(Params.type_movie)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –≤—ã –∏—â–∏—Ç–µ',
                         reply_markup=kb.choice)


@router.callback_query(F.data == 'series')
async def series_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.delete()
    await state.update_data(type_movie='series')
    await state.set_state(Params.name)
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')


@router.callback_query(F.data == 'film')
async def film_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.delete()
    await state.update_data(type_movie='film')
    await state.set_state(Params.name)
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')


@router.message(Params.name)
async def name_handler(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    data = await state.get_data()
    movie = search_query(data['name'].capitalize(), data['type_movie'])
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data['name']}</b>\n" +
                         f"–¢–∏–ø: <b>{type_movies[data['type_movie']]}</b>",
                         parse_mode="html")
    if movie:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ ‚ú®‚ú®‚ú®:")
        await message.answer_photo(photo=movie['picture'],
                                   caption=f"<b>{movie['title']}</b>\n" +
                                           f"{movie['description']}\n" +
                                           f"{movie['link']}",
                                   parse_mode="html")
    else:
        await message.answer(f"–í–∞—à {type_movies[data['type_movie']]} " +
                             f"–Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
    await message.answer('–ù–∞–π—Ç–∏ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º?', reply_markup=kb.find_movie)
